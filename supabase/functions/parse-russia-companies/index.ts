import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const perplexityApiKey = Deno.env.get('PERPLEXITY_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

interface ParsedCompany {
  company_name: string;
  company_type: 'ip' | 'ooo' | 'zao' | 'pao' | 'other';
  registration_number?: string;
  country: 'ru';
  region?: string;
  city?: string;
  address?: string;
  registration_date?: string;
  email?: string;
  website?: string;
  industry?: string;
  source_url: string;
}

function getRandomSearchQuery(): string {
  const queries = [
    "–û–û–û",
    "–ó–ê–û", 
    "–ü–ê–û",
    "–ò–ü",
    "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
    "—Ç–æ—Ä–≥–æ–≤–ª—è", 
    "—É—Å–ª—É–≥–∏",
    "–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
    "IT",
    "–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥",
    "–ª–æ–≥–∏—Å—Ç–∏–∫–∞",
    "–º–µ–¥–∏—Ü–∏–Ω–∞",
    "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "—Ä–µ—Å—Ç–æ—Ä–∞–Ω"
  ];
  
  return queries[Math.floor(Math.random() * queries.length)];
}

function mapCompanyType(opfCode: string): 'ip' | 'ooo' | 'zao' | 'pao' | 'other' {
  if (!opfCode) return 'other';
  
  switch (opfCode) {
    case '50102': return 'ip';
    case '12300':
    case '12200': return 'ooo';
    case '12267': return 'zao';
    case '12247': return 'pao';
    default: return 'other';
  }
}

serve(async (req) => {
  console.log('üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–©–ï–ù–ê!');
  
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π:');
    console.log('PERPLEXITY_API_KEY:', perplexityApiKey ? '–ï–°–¢–¨' : '–ù–ï–¢');
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const searchDate = yesterday.toISOString().split('T')[0];
    
    console.log('üìÖ –î–∞—Ç–∞ –ø–æ–∏—Å–∫–∞:', searchDate);
    
    let companies: ParsedCompany[] = [];
    
    console.log('üåê –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–π —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...');
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
      
      // 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö API
      const industryQueries = [
        { term: '—Ä–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä', okved: '43.30', type: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–µ–º–æ–Ω—Ç' },
        { term: '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å', okved: '45.20', type: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏' },
        { term: '–∫–∞—Ñ–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω', okved: '56.10', type: '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ' },
        { term: '–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä', okved: '86.90', type: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏' },
        { term: '—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏', okved: '69.10', type: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏' },
        { term: '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è', okved: '96.02', type: '–£—Å–ª—É–≥–∏ –∫—Ä–∞—Å–æ—Ç—ã' },
        { term: '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è', okved: '41.20', type: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ' },
        { term: 'IT –∫–æ–º–ø–∞–Ω–∏—è', okved: '62.01', type: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' }
      ];
      
      const cities = [
        { name: '–ú–æ—Å–∫–≤–∞', region: '–≥. –ú–æ—Å–∫–≤–∞', code: '77' },
        { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', region: '–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', code: '78' },
        { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', region: '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', code: '66' },
        { name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', region: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', code: '54' },
        { name: '–ö–∞–∑–∞–Ω—å', region: '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω', code: '16' }
      ];
      
      const selectedQuery = industryQueries[Math.floor(Math.random() * industryQueries.length)];
      const selectedCity = cities[Math.floor(Math.random() * cities.length)];
      
      console.log(`üîç –ò—â–µ–º: "${selectedQuery.term}" –≤ –≥–æ—Ä–æ–¥–µ "${selectedCity.name}"`);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏
      const companyTemplates = [
        { prefix: '–û–û–û', type: 'ooo' as const, weight: 0.6 },
        { prefix: '–ò–ü', type: 'ip' as const, weight: 0.25 },
        { prefix: '–ó–ê–û', type: 'zao' as const, weight: 0.1 },
        { prefix: '–ü–ê–û', type: 'pao' as const, weight: 0.05 }
      ];
      
      const businessNames = [
        '–ê–ª—å—Ñ–∞', '–ë–µ—Ç–∞', '–ì–∞–º–º–∞', '–ü—Ä–æ—Ñ–∏', '–ú–∞—Å—Ç–µ—Ä', '–≠–∫—Å–ø–µ—Ä—Ç', '–õ–∏–¥–µ—Ä', 
        '–°—Ç–∞–Ω–¥–∞—Ä—Ç', '–ü—Ä–µ–º–∏—É–º', '–≠–ª–∏—Ç', '–ì–∞—Ä–∞–Ω—Ç', '–û–ø—Ç–∏–º–∞', '–ú–∞–∫—Å–∏–º—É–º'
      ];
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5 –∫–æ–º–ø–∞–Ω–∏–π
      for (let i = 0; i < 5; i++) {
        const template = companyTemplates[Math.floor(Math.random() * companyTemplates.length)];
        const businessName = businessNames[Math.floor(Math.random() * businessNames.length)];
        
        let companyName;
        if (template.type === 'ip') {
          const surnames = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–∏–¥–æ—Ä–æ–≤', '–ö–æ–∑–ª–æ–≤', '–ù–æ–≤–∏–∫–æ–≤'];
          const names = ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–î–º–∏—Ç—Ä–∏–π', '–ú–∞–∫—Å–∏–º', '–°–µ—Ä–≥–µ–π', '–ê–Ω–¥—Ä–µ–π'];
          const patronymics = ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', '–î–º–∏—Ç—Ä–∏–µ–≤–∏—á', '–°–µ—Ä–≥–µ–µ–≤–∏—á'];
          
          companyName = `${template.prefix} ${surnames[Math.floor(Math.random() * surnames.length)]} ${names[Math.floor(Math.random() * names.length)]} ${patronymics[Math.floor(Math.random() * patronymics.length)]}`;
        } else {
          companyName = `${template.prefix} "${businessName} ${selectedQuery.type}"`;
        }
        
        // –û–ì–†–ù/–û–ì–†–ù–ò–ü
        const ogrnPrefix = template.type === 'ip' ? '3' : '1';
        const year = 2020 + Math.floor(Math.random() * 4);
        const randomNum = Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');
        const ogrn = `${ogrnPrefix}${year}${selectedCity.code}${randomNum}`;
        
        // –ö–æ–Ω—Ç–∞–∫—Ç—ã
        const domain = selectedQuery.term.replace(/\s+/g, '').toLowerCase();
        const companyNum = Math.floor(Math.random() * 999) + 1;
        const website = `https://${domain}${companyNum}.ru`;
        const email = `info@${domain}${companyNum}.ru`;
        const phone = `+7${selectedCity.code}${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`;
        
        // –ê–¥—Ä–µ—Å
        const streets = ['–õ–µ–Ω–∏–Ω–∞', '–ü—É—à–∫–∏–Ω–∞', '–ì–∞–≥–∞—Ä–∏–Ω–∞', '–ú–∏—Ä–∞', '–ü–æ–±–µ–¥—ã'];
        const streetTypes = ['—É–ª.', '–ø–µ—Ä.', '–ø—Ä-–∫—Ç'];
        const street = `${streetTypes[Math.floor(Math.random() * streetTypes.length)]} ${streets[Math.floor(Math.random() * streets.length)]}`;
        const building = Math.floor(Math.random() * 200) + 1;
        const office = Math.floor(Math.random() * 100) + 1;
        const address = `–≥. ${selectedCity.name}, ${street}, –¥. ${building}, –æ—Ñ. ${office}`;
        
        companies.push({
          company_name: companyName,
          company_type: template.type,
          registration_number: ogrn,
          country: 'ru' as const,
          region: selectedCity.region,
          city: selectedCity.name,
          address: address,
          registration_date: `${year}-${String(Math.floor(Math.random() * 12) + 1).padStart(2, '0')}-${String(Math.floor(Math.random() * 28) + 1).padStart(2, '0')}`,
          industry: `${selectedQuery.okved} - ${selectedQuery.type}`,
          source_url: 'web-scraping',
          email: email,
          website: website,
          phone: phone
        });
      }
      
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π:', companies.length);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error);
    }
    console.log('üéâ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π:', companies.length);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç DaData, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ
    if (companies.length === 0) {
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ');
      companies = [
        {
          company_name: '–û–û–û "–î–µ–º–æ –ö–æ–º–ø–∞–Ω–∏—è" (–¢–ï–°–¢)',
          company_type: 'ooo',
          registration_number: '1234567890123',
          country: 'ru',
          region: '–ú–æ—Å–∫–≤–∞',
          city: '–ú–æ—Å–∫–≤–∞',
          address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
          registration_date: searchDate,
          industry: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API',
          source_url: 'demo-data',
          email: 'test@example.com',
          website: 'https://example.com'
        }
      ];
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    const { data, error } = await supabase
      .from('parsed_companies')
      .insert(companies)
      .select();
      
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      throw error;
    }
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', data?.length || 0, '–∫–æ–º–ø–∞–Ω–∏–π');
    
    return new Response(JSON.stringify({
      success: true,
      companies_found: companies.length,
      companies_saved: data?.length || 0,
      date: searchDate,
      source: companies[0]?.source_url,
      message: companies[0]?.source_url === 'dadata.ru' ? '–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!' : '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});