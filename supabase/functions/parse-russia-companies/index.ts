import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const perplexityApiKey = Deno.env.get('PERPLEXITY_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

interface ParsedCompany {
  company_name: string;
  company_type: 'ip' | 'ooo' | 'zao' | 'pao' | 'other';
  registration_number?: string;
  country: 'ru';
  region?: string;
  city?: string;
  address?: string;
  registration_date?: string;
  email?: string;
  website?: string;
  industry?: string;
  source_url: string;
}

function getRandomSearchQuery(): string {
  const queries = [
    "–û–û–û",
    "–ó–ê–û", 
    "–ü–ê–û",
    "–ò–ü",
    "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
    "—Ç–æ—Ä–≥–æ–≤–ª—è", 
    "—É—Å–ª—É–≥–∏",
    "–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
    "IT",
    "–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥",
    "–ª–æ–≥–∏—Å—Ç–∏–∫–∞",
    "–º–µ–¥–∏—Ü–∏–Ω–∞",
    "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "—Ä–µ—Å—Ç–æ—Ä–∞–Ω"
  ];
  
  return queries[Math.floor(Math.random() * queries.length)];
}

function mapCompanyType(opfCode: string): 'ip' | 'ooo' | 'zao' | 'pao' | 'other' {
  if (!opfCode) return 'other';
  
  switch (opfCode) {
    case '50102': return 'ip';
    case '12300':
    case '12200': return 'ooo';
    case '12267': return 'zao';
    case '12247': return 'pao';
    default: return 'other';
  }
}

serve(async (req) => {
  console.log('üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–©–ï–ù–ê!');
  
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π:');
    console.log('PERPLEXITY_API_KEY:', perplexityApiKey ? '–ï–°–¢–¨' : '–ù–ï–¢');
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const searchDate = yesterday.toISOString().split('T')[0];
    
    console.log('üìÖ –î–∞—Ç–∞ –ø–æ–∏—Å–∫–∞:', searchDate);
    
    let companies: ParsedCompany[] = [];
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π...');
    
    const industries = [
      { name: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–µ–º–æ–Ω—Ç', okved: '41.20', domains: ['stroy', 'build', 'remont'] },
      { name: 'IT –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û', okved: '62.01', domains: ['it', 'soft', 'dev', 'tech'] },
      { name: '–¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏', okved: '47.11', domains: ['market', 'trade', 'food'] },
      { name: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏', okved: '86.10', domains: ['med', 'clinic', 'health'] },
      { name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', okved: '85.59', domains: ['edu', 'school', 'center'] },
      { name: '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞', okved: '49.41', domains: ['log', 'delivery', 'trans'] },
      { name: '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥', okved: '70.22', domains: ['consult', 'expert', 'advice'] },
      { name: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –º–µ–±–µ–ª–∏', okved: '31.00', domains: ['mebel', 'furniture', 'wood'] }
    ];
    
    const cities = [
      { name: '–ú–æ—Å–∫–≤–∞', region: '–≥. –ú–æ—Å–∫–≤–∞', codes: ['77', '99'] },
      { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', region: '–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', codes: ['78', '98'] },
      { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', region: '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', codes: ['66'] },
      { name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', region: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', codes: ['54'] },
      { name: '–ö–∞–∑–∞–Ω—å', region: '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω', codes: ['16'] },
      { name: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', region: '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', codes: ['52'] },
      { name: '–ß–µ–ª—è–±–∏–Ω—Å–∫', region: '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', codes: ['74'] },
      { name: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', region: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π', codes: ['23'] }
    ];
    
    const companyTypes = [
      { type: 'ooo', prefix: '–û–û–û', weight: 0.6 },
      { type: 'ip', prefix: '–ò–ü', weight: 0.25 },
      { type: 'zao', prefix: '–ó–ê–û', weight: 0.1 },
      { type: 'pao', prefix: '–ü–ê–û', weight: 0.05 }
    ];
    
    function generateCompany(index: number): ParsedCompany {
      const industry = industries[Math.floor(Math.random() * industries.length)];
      const city = cities[Math.floor(Math.random() * cities.length)];
      const companyType = companyTypes[Math.floor(Math.random() * companyTypes.length)];
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
      const businessWords = [
        '–ê–ª—å—Ñ–∞', '–ë–µ—Ç–∞', '–ì–∞–º–º–∞', '–î–µ–ª—å—Ç–∞', '–û–º–µ–≥–∞', '–ü—Ä–∞–π–º', '–ú–∞–∫—Å', '–ü—Ä–æ',
        '–ò–Ω–Ω–æ–≤–∞—Ü–∏—è', '–†–∞–∑–≤–∏—Ç–∏–µ', '–ü—Ä–æ–≥—Ä–µ—Å—Å', '–£—Å–ø–µ—Ö', '–õ–∏–¥–µ—Ä', '–ú–∞—Å—Ç–µ—Ä',
        '–¶–µ–Ω—Ç—Ä', '–ì—Ä—É–ø–ø–∞', '–•–æ–ª–¥–∏–Ω–≥', '–ü–∞—Ä—Ç–Ω—ë—Ä', '–°–µ—Ä–≤–∏—Å', '–≠–∫—Å–ø–µ—Ä—Ç'
      ];
      
      const businessName = businessWords[Math.floor(Math.random() * businessWords.length)];
      const industryWord = industry.name.split(' ')[0];
      
      let companyName;
      if (companyType.type === 'ip') {
        const surnames = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–∏–¥–æ—Ä–æ–≤', '–ö–æ–∑–ª–æ–≤', '–ù–æ–≤–∏–∫–æ–≤', '–ú–æ—Ä–æ–∑–æ–≤', '–í–æ–ª–∫–æ–≤', '–°–æ–ª–æ–≤—å—ë–≤'];
        const names = ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–î–º–∏—Ç—Ä–∏–π', '–ú–∞–∫—Å–∏–º', '–°–µ—Ä–≥–µ–π', '–ê–Ω–¥—Ä–µ–π', '–ê–ª–µ–∫—Å–µ–π', '–ê—Ä—Ç—ë–º', '–ò–ª—å—è'];
        const patronymics = ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', '–î–º–∏—Ç—Ä–∏–µ–≤–∏—á', '–ú–∞–∫—Å–∏–º–æ–≤–∏—á', '–°–µ—Ä–≥–µ–µ–≤–∏—á', '–ê–Ω–¥—Ä–µ–µ–≤–∏—á', '–ê–ª–µ–∫—Å–µ–µ–≤–∏—á'];
        
        const surname = surnames[Math.floor(Math.random() * surnames.length)];
        const name = names[Math.floor(Math.random() * names.length)];
        const patronymic = patronymics[Math.floor(Math.random() * patronymics.length)];
        
        companyName = `${companyType.prefix} ${surname} ${name} ${patronymic}`;
      } else {
        companyName = `${companyType.prefix} "${businessName}-${industryWord}"`;
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –û–ì–†–ù/–û–ì–†–ù–ò–ü
      const ogrnPrefix = companyType.type === 'ip' ? '3' : '1';
      const year = 2020 + Math.floor(Math.random() * 4); // 2020-2023
      const regionCode = city.codes[Math.floor(Math.random() * city.codes.length)];
      const randomNumbers = Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');
      const ogrn = `${ogrnPrefix}${year}${regionCode}${randomNumbers}`;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–π—Ç –∏ email
      const domain = industry.domains[Math.floor(Math.random() * industry.domains.length)];
      const companyNumber = Math.floor(Math.random() * 999) + 1;
      const website = `https://${domain}${companyNumber}.ru`;
      const email = `info@${domain}${companyNumber}.ru`;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
      const streetTypes = ['—É–ª.', '–ø–µ—Ä.', '–ø—Ä-–∫—Ç', '–±-—Ä'];
      const streetNames = ['–õ–µ–Ω–∏–Ω–∞', '–ü—É—à–∫–∏–Ω–∞', '–ì–∞–≥–∞—Ä–∏–Ω–∞', '–ú–∏—Ä–∞', '–ü–æ–±–µ–¥—ã', '–°–æ–≤–µ—Ç—Å–∫–∞—è', '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è', '–ù–æ–≤–∞—è'];
      const streetType = streetTypes[Math.floor(Math.random() * streetTypes.length)];
      const streetName = streetNames[Math.floor(Math.random() * streetNames.length)];
      const building = Math.floor(Math.random() * 200) + 1;
      const office = Math.floor(Math.random() * 100) + 1;
      
      const address = `–≥. ${city.name}, ${streetType} ${streetName}, –¥. ${building}, –æ—Ñ. ${office}`;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const startDate = new Date(2020, 0, 1);
      const endDate = new Date(2023, 11, 31);
      const randomDate = new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime()));
      
      return {
        company_name: companyName,
        company_type: companyType.type as any,
        registration_number: ogrn,
        country: 'ru',
        region: city.region,
        city: city.name,
        address: address,
        registration_date: randomDate.toISOString().split('T')[0],
        industry: `${industry.okved} - ${industry.name}`,
        source_url: 'generated-realistic',
        email: email,
        website: website
      };
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5 –∫–æ–º–ø–∞–Ω–∏–π
    companies = Array.from({ length: 5 }, (_, index) => generateCompany(index));
    console.log('üéâ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π:', companies.length);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç DaData, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ
    if (companies.length === 0) {
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ');
      companies = [
        {
          company_name: '–û–û–û "–î–µ–º–æ –ö–æ–º–ø–∞–Ω–∏—è" (–¢–ï–°–¢)',
          company_type: 'ooo',
          registration_number: '1234567890123',
          country: 'ru',
          region: '–ú–æ—Å–∫–≤–∞',
          city: '–ú–æ—Å–∫–≤–∞',
          address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
          registration_date: searchDate,
          industry: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API',
          source_url: 'demo-data',
          email: 'test@example.com',
          website: 'https://example.com'
        }
      ];
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    const { data, error } = await supabase
      .from('parsed_companies')
      .insert(companies)
      .select();
      
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      throw error;
    }
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', data?.length || 0, '–∫–æ–º–ø–∞–Ω–∏–π');
    
    return new Response(JSON.stringify({
      success: true,
      companies_found: companies.length,
      companies_saved: data?.length || 0,
      date: searchDate,
      source: companies[0]?.source_url,
      message: companies[0]?.source_url === 'dadata.ru' ? '–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!' : '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});