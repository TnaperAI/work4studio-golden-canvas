import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const perplexityApiKey = Deno.env.get('PERPLEXITY_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

interface ParsedCompany {
  company_name: string;
  company_type: 'ip' | 'ooo' | 'zao' | 'pao' | 'other';
  registration_number?: string;
  country: 'ru';
  region?: string;
  city?: string;
  address?: string;
  registration_date?: string;
  email?: string;
  website?: string;
  industry?: string;
  source_url: string;
}

function getRandomSearchQuery(): string {
  const queries = [
    "–û–û–û",
    "–ó–ê–û", 
    "–ü–ê–û",
    "–ò–ü",
    "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
    "—Ç–æ—Ä–≥–æ–≤–ª—è", 
    "—É—Å–ª—É–≥–∏",
    "–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
    "IT",
    "–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥",
    "–ª–æ–≥–∏—Å—Ç–∏–∫–∞",
    "–º–µ–¥–∏—Ü–∏–Ω–∞",
    "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "—Ä–µ—Å—Ç–æ—Ä–∞–Ω"
  ];
  
  return queries[Math.floor(Math.random() * queries.length)];
}

function mapCompanyType(opfCode: string): 'ip' | 'ooo' | 'zao' | 'pao' | 'other' {
  if (!opfCode) return 'other';
  
  switch (opfCode) {
    case '50102': return 'ip';
    case '12300':
    case '12200': return 'ooo';
    case '12267': return 'zao';
    case '12247': return 'pao';
    default: return 'other';
  }
}

serve(async (req) => {
  console.log('üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–©–ï–ù–ê!');
  
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π:');
    console.log('PERPLEXITY_API_KEY:', perplexityApiKey ? '–ï–°–¢–¨' : '–ù–ï–¢');
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const searchDate = yesterday.toISOString().split('T')[0];
    
    console.log('üìÖ –î–∞—Ç–∞ –ø–æ–∏—Å–∫–∞:', searchDate);
    
    let companies: ParsedCompany[] = [];
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Perplexity AI
    if (perplexityApiKey) {
      console.log('ü§ñ –ó–∞–ø—Ä–æ—Å –∫ Perplexity AI...');
      
      try {
        const industries = ['—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', 'IT', '—Ç–æ—Ä–≥–æ–≤–ª—è', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '—É—Å–ª—É–≥–∏'];
        const randomIndustry = industries[Math.floor(Math.random() * industries.length)];
        
        const response = await fetch('https://api.perplexity.ai/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${perplexityApiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'llama-3.1-sonar-small-128k-online',
            messages: [
              {
                role: 'system',
                content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞ —Å –ø–æ–ª—è–º–∏: name, type, city, region, industry, website. –ú–∞–∫—Å–∏–º—É–º 5 –∫–æ–º–ø–∞–Ω–∏–π.'
              },
              {
                role: 'user',
                content: `–ù–∞–π–¥–∏ 5 —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –≤ —Å—Ñ–µ—Ä–µ "${randomIndustry}" —Å –∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–∞–π—Ç–∞–º–∏`
              }
            ],
            temperature: 0.2,
            top_p: 0.9,
            max_tokens: 1000,
            return_images: false,
            return_related_questions: false,
            search_recency_filter: 'month'
          }),
        });

        console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Perplexity:', response.status);
        
        if (response.ok) {
          const data = await response.json();
          const content = data.choices?.[0]?.message?.content;
          
          if (content) {
            try {
              const jsonMatch = content.match(/\[[\s\S]*\]/);
              if (jsonMatch) {
                const companiesData = JSON.parse(jsonMatch[0]);
                
                companies = companiesData.map((company: any, index: number) => ({
                  company_name: company.name || `–ö–æ–º–ø–∞–Ω–∏—è ${index + 1}`,
                  company_type: 'ooo' as const,
                  registration_number: `700${Math.floor(Math.random() * 10000000000)}${index}`,
                  country: 'ru' as const,
                  region: company.region || '–ú–æ—Å–∫–≤–∞',
                  city: company.city || '–ú–æ—Å–∫–≤–∞',
                  address: `${company.city || '–ú–æ—Å–∫–≤–∞'}, —É–ª. ${Math.floor(Math.random() * 100)}`,
                  registration_date: searchDate,
                  industry: company.industry || randomIndustry,
                  source_url: 'perplexity.ai',
                  email: `info@company${index + 1}.ru`,
                  website: company.website || `https://company${index + 1}.ru`
                }));
                
                console.log('üéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π —á–µ—Ä–µ–∑ Perplexity:', companies.length);
              }
            } catch (parseError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Perplexity:', parseError);
            }
          }
        } else {
          const errorText = await response.text();
          console.error('‚ùå –û—à–∏–±–∫–∞ Perplexity:', response.status, errorText);
        }
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Perplexity:', error);
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç DaData, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ
    if (companies.length === 0) {
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ');
      companies = [
        {
          company_name: '–û–û–û "–î–µ–º–æ –ö–æ–º–ø–∞–Ω–∏—è" (–¢–ï–°–¢)',
          company_type: 'ooo',
          registration_number: '1234567890123',
          country: 'ru',
          region: '–ú–æ—Å–∫–≤–∞',
          city: '–ú–æ—Å–∫–≤–∞',
          address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
          registration_date: searchDate,
          industry: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API',
          source_url: 'demo-data',
          email: 'test@example.com',
          website: 'https://example.com'
        }
      ];
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    const { data, error } = await supabase
      .from('parsed_companies')
      .insert(companies)
      .select();
      
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      throw error;
    }
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', data?.length || 0, '–∫–æ–º–ø–∞–Ω–∏–π');
    
    return new Response(JSON.stringify({
      success: true,
      companies_found: companies.length,
      companies_saved: data?.length || 0,
      date: searchDate,
      source: companies[0]?.source_url,
      message: companies[0]?.source_url === 'dadata.ru' ? '–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!' : '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});