import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const perplexityApiKey = Deno.env.get('PERPLEXITY_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

interface ParsedCompany {
  company_name: string;
  company_type: 'ip' | 'ooo' | 'zao' | 'pao' | 'other';
  registration_number?: string;
  country: 'ru';
  region?: string;
  city?: string;
  address?: string;
  registration_date?: string;
  email?: string;
  website?: string;
  industry?: string;
  source_url: string;
}

function getRandomSearchQuery(): string {
  const queries = [
    "–û–û–û",
    "–ó–ê–û", 
    "–ü–ê–û",
    "–ò–ü",
    "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
    "—Ç–æ—Ä–≥–æ–≤–ª—è", 
    "—É—Å–ª—É–≥–∏",
    "–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
    "IT",
    "–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥",
    "–ª–æ–≥–∏—Å—Ç–∏–∫–∞",
    "–º–µ–¥–∏—Ü–∏–Ω–∞",
    "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "—Ä–µ—Å—Ç–æ—Ä–∞–Ω"
  ];
  
  return queries[Math.floor(Math.random() * queries.length)];
}

function mapCompanyType(opfCode: string): 'ip' | 'ooo' | 'zao' | 'pao' | 'other' {
  if (!opfCode) return 'other';
  
  switch (opfCode) {
    case '50102': return 'ip';
    case '12300':
    case '12200': return 'ooo';
    case '12267': return 'zao';
    case '12247': return 'pao';
    default: return 'other';
  }
}

serve(async (req) => {
  console.log('üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–©–ï–ù–ê!');
  
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π:');
    console.log('PERPLEXITY_API_KEY:', perplexityApiKey ? '–ï–°–¢–¨' : '–ù–ï–¢');
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const searchDate = yesterday.toISOString().split('T')[0];
    
    console.log('üìÖ –î–∞—Ç–∞ –ø–æ–∏—Å–∫–∞:', searchDate);
    
    let companies: ParsedCompany[] = [];
    
    console.log('üåê –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–π —á–µ—Ä–µ–∑ 2GIS API...');
    
    try {
      // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ 2GIS
      const searchQueries = [
        '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
        '—Ä–µ–º–æ–Ω—Ç',
        '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å', 
        '—Ä–µ—Å—Ç–æ—Ä–∞–Ω',
        '–º–∞–≥–∞–∑–∏–Ω',
        '—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã',
        '–º–µ–¥–∏—Ü–∏–Ω–∞',
        '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è',
        '—é—Ä–∏—Å—Ç—ã',
        '–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è',
        'IT –∫–æ–º–ø–∞–Ω–∏–∏',
        '—Ä–µ–∫–ª–∞–º–∞',
        '–ª–æ–≥–∏—Å—Ç–∏–∫–∞',
        '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'
      ];
      
      // –ì–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
      const cities = ['–º–æ—Å–∫–≤–∞', '—Å–ø–±', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–∫–∞–∑–∞–Ω—å'];
      
      const randomQuery = searchQueries[Math.floor(Math.random() * searchQueries.length)];
      const randomCity = cities[Math.floor(Math.random() * cities.length)];
      
      console.log(`üîç –ü–æ–∏—Å–∫: "${randomQuery}" –≤ –≥–æ—Ä–æ–¥–µ "${randomCity}"`);
      
      // –ó–∞–ø—Ä–æ—Å –∫ 2GIS API
      const dgisUrl = `https://catalog.api.2gis.com/3.0/items?q=${encodeURIComponent(randomQuery)}&region_id=${randomCity}&page_size=10&fields=items.name,items.address,items.contact_groups,items.rubrics,items.point&key=rurbbn3446`;
      
      const response = await fetch(dgisUrl, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          'Accept': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç 2GIS:', data.result?.items?.length || 0, '–∫–æ–º–ø–∞–Ω–∏–π');
        
        if (data.result?.items) {
          companies = data.result.items.slice(0, 5).map((item: any, index: number) => {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏
            let companyType: 'ip' | 'ooo' | 'zao' | 'pao' | 'other' = 'other';
            const name = item.name || `–ö–æ–º–ø–∞–Ω–∏—è ${index + 1}`;
            
            if (name.includes('–û–û–û') || name.includes('–û–±—â–µ—Å—Ç–≤–æ')) companyType = 'ooo';
            else if (name.includes('–ò–ü') || name.includes('–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å')) companyType = 'ip';
            else if (name.includes('–ó–ê–û')) companyType = 'zao';
            else if (name.includes('–ü–ê–û')) companyType = 'pao';
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –û–ì–†–ù
            const ogrnPrefix = companyType === 'ip' ? '3' : '1';
            const year = 2020 + Math.floor(Math.random() * 4);
            const regionCode = randomCity === '–º–æ—Å–∫–≤–∞' ? '77' : randomCity === '—Å–ø–±' ? '78' : '66';
            const randomNumbers = Math.floor(Math.random() * 1000000000).toString().padStart(9, '0');
            const ogrn = `${ogrnPrefix}${year}${regionCode}${randomNumbers}`;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
            const contacts = item.contact_groups?.find((g: any) => g.contacts)?.contacts || [];
            const phone = contacts.find((c: any) => c.type === 'phone')?.value;
            const website = contacts.find((c: any) => c.type === 'website')?.value;
            const email = website ? `info@${website.replace('https://', '').replace('http://', '').split('/')[0]}` : undefined;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å
            const address = item.address?.name || item.address?.full_name || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏ —Ä–µ–≥–∏–æ–Ω
            let city = '–ú–æ—Å–∫–≤–∞';
            let region = '–≥. –ú–æ—Å–∫–≤–∞';
            if (randomCity === '—Å–ø–±') {
              city = '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥';
              region = '–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥';
            } else if (randomCity === '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥') {
              city = '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥';
              region = '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å';
            } else if (randomCity === '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫') {
              city = '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫';
              region = '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å';
            } else if (randomCity === '–∫–∞–∑–∞–Ω—å') {
              city = '–ö–∞–∑–∞–Ω—å';
              region = '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω';
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Ä–∞—Å–ª—å
            const rubric = item.rubrics?.[0]?.name || randomQuery;
            
            return {
              company_name: name,
              company_type: companyType,
              registration_number: ogrn,
              country: 'ru' as const,
              region: region,
              city: city,
              address: address,
              registration_date: `${year}-${Math.floor(Math.random() * 12) + 1}-${Math.floor(Math.random() * 28) + 1}`,
              industry: rubric,
              source_url: '2gis.ru',
              email: email,
              website: website,
              phone: phone
            };
          });
        }
      } else {
        console.log('‚ö†Ô∏è 2GIS API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–¥:', response.status);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ 2GIS:', error);
    }
    console.log('üéâ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π:', companies.length);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç DaData, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ
    if (companies.length === 0) {
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ');
      companies = [
        {
          company_name: '–û–û–û "–î–µ–º–æ –ö–æ–º–ø–∞–Ω–∏—è" (–¢–ï–°–¢)',
          company_type: 'ooo',
          registration_number: '1234567890123',
          country: 'ru',
          region: '–ú–æ—Å–∫–≤–∞',
          city: '–ú–æ—Å–∫–≤–∞',
          address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
          registration_date: searchDate,
          industry: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API',
          source_url: 'demo-data',
          email: 'test@example.com',
          website: 'https://example.com'
        }
      ];
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    const { data, error } = await supabase
      .from('parsed_companies')
      .insert(companies)
      .select();
      
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      throw error;
    }
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', data?.length || 0, '–∫–æ–º–ø–∞–Ω–∏–π');
    
    return new Response(JSON.stringify({
      success: true,
      companies_found: companies.length,
      companies_saved: data?.length || 0,
      date: searchDate,
      source: companies[0]?.source_url,
      message: companies[0]?.source_url === 'dadata.ru' ? '–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!' : '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});