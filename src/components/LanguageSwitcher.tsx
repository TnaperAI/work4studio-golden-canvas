import React from 'react';
import { Globe } from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Button } from '@/components/ui/button';
import { useLanguage } from '@/contexts/LanguageContext';

const LanguageSwitcher = () => {
  const { language, setLanguage, isLoading } = useLanguage();

  const languages = [
    { code: 'ru' as const, name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { code: 'en' as const, name: 'English', flag: 'üá∫üá∏' },
  ];

  const currentLanguage = languages.find(lang => lang.code === language);

  if (isLoading) {
    return null; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–æ–∫–∞ –∏–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç
  }

  const handleLanguageChange = (newLang: 'ru' | 'en') => {
    // setLanguage –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å URL
    setLanguage(newLang);
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="sm" className="flex items-center gap-2">
          <Globe className="h-4 w-4" />
          <span className="lg:hidden">
            {currentLanguage?.code?.toUpperCase()}
          </span>
          <span className="hidden lg:inline">
            {currentLanguage?.name}
          </span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-36">
        {languages.map((lang) => (
          <DropdownMenuItem
            key={lang.code}
            onClick={() => handleLanguageChange(lang.code)}
            className={`flex items-center gap-2 cursor-pointer ${
              language === lang.code ? 'bg-muted' : ''
            }`}
          >
            <span>{lang.name}</span>
            {language === lang.code && (
              <span className="ml-auto text-primary">‚úì</span>
            )}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default LanguageSwitcher;