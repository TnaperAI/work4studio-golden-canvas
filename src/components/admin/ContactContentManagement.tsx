import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { useSiteContent } from '@/hooks/useSiteContent';
import { useLanguage } from '@/contexts/LanguageContext';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Save, 
  RotateCcw, 
  Mail, 
  Phone, 
  Clock,
  MapPin,
  MessageSquare,
  Settings,
  Globe
} from 'lucide-react';

interface ContactContentManagementProps {
  language?: 'ru' | 'en';
}

const ContactContentManagement = ({ language: propLanguage }: ContactContentManagementProps) => {
  const { content, getContent, updateContent } = useSiteContent();
  const { toast } = useToast();
  const { language: contextLanguage } = useLanguage();
  const [formData, setFormData] = useState<Record<string, Record<string, string>>>({});
  const [isLoading, setIsLoading] = useState(false);
  
  // Use prop language if provided, otherwise use context language
  const currentLanguage = propLanguage || contextLanguage;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    if (content.length > 0) {
      const groupedContent: Record<string, Record<string, string>> = {};
      
      content.forEach(item => {
        if (item.language === currentLanguage) {
          if (!groupedContent[item.section]) {
            groupedContent[item.section] = {};
          }
          groupedContent[item.section][item.key] = item.value;
        }
      });
      
      setFormData(groupedContent);
    }
  }, [content, currentLanguage]);

  const handleInputChange = (section: string, key: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [key]: value
      }
    }));
  };

  const handleSave = async () => {
    setIsLoading(true);
    try {
      for (const section of Object.keys(formData)) {
        for (const [key, value] of Object.entries(formData[section])) {
          await updateContent(section, key, value, currentLanguage);
        }
      }
      
      toast({
        title: '–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
        description: '–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
      });
    } catch (error) {
      console.error('Error saving content:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        variant: 'destructive'
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleReset = () => {
    if (content.length > 0) {
      const groupedContent: Record<string, Record<string, string>> = {};
      
      content.forEach(item => {
        if (item.language === currentLanguage) {
          if (!groupedContent[item.section]) {
            groupedContent[item.section] = {};
          }
          groupedContent[item.section][item.key] = item.value;
        }
      });
      
      setFormData(groupedContent);
      toast({
        title: '–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã',
        description: '–§–æ—Ä–º–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é'
      });
    }
  };

  const sections = [
    {
      id: 'contact_breadcrumb',
      title: '–•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏',
      icon: MapPin,
      fields: [
        { key: 'breadcrumb_home', label: '–ì–ª–∞–≤–Ω–∞—è', placeholder: '–ì–ª–∞–≤–Ω–∞—è / Home' },
        { key: 'breadcrumb_contact', label: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', placeholder: '–ö–æ–Ω—Ç–∞–∫—Ç—ã / Contacts' },
      ]
    },
    {
      id: 'contact_hero',
      title: 'Hero –±–ª–æ–∫',
      icon: MessageSquare,
      fields: [
        { key: 'hero_title_1', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫, —á–∞—Å—Ç—å 1', placeholder: '–û–±—Å—É–¥–∏–º –≤–∞—à / Let\'s discuss your' },
        { key: 'hero_title_2', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫, —á–∞—Å—Ç—å 2', placeholder: '–ø—Ä–æ–µ–∫—Ç? / project?' },
        { key: 'hero_subtitle', label: '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫', placeholder: '–ì–æ—Ç–æ–≤—ã –≤–æ–ø–ª–æ—Ç–∏—Ç—å –≤–∞—à—É –∏–¥–µ—é –≤ –∂–∏–∑–Ω—å' },
        { key: 'hero_description', label: '–û–ø–∏—Å–∞–Ω–∏–µ', placeholder: '–ú—ã —Å–æ–∑–¥–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ–±-—Ä–µ—à–µ–Ω–∏—è...' }
      ]
    },
    {
      id: 'contact_info',
      title: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      icon: Phone,
      fields: [
        { key: 'contact_email', label: 'Email', placeholder: 'contact@example.com' },
        { key: 'contact_phone', label: '–¢–µ–ª–µ—Ñ–æ–Ω', placeholder: '+7 (999) 123-45-67' },
        { key: 'contact_hours', label: '–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã', placeholder: '–ü–Ω-–ü—Ç: 9:00 - 18:00' },
        { key: 'contact_address', label: '–ê–¥—Ä–µ—Å', placeholder: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1' }
      ]
    },
    {
      id: 'contact_form',
      title: '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏',
      icon: Mail,
      fields: [
        { key: 'form_title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã', placeholder: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ' },
        { key: 'form_description', label: '–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã', placeholder: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏' },
        { key: 'form_name_label', label: '–ú–µ—Ç–∫–∞ "–ò–º—è"', placeholder: '–í–∞—à–µ –∏–º—è' },
        { key: 'form_email_label', label: '–ú–µ—Ç–∫–∞ "Email"', placeholder: '–í–∞—à email' },
        { key: 'form_phone_label', label: '–ú–µ—Ç–∫–∞ "–¢–µ–ª–µ—Ñ–æ–Ω"', placeholder: '–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω' },
        { key: 'form_message_label', label: '–ú–µ—Ç–∫–∞ "–°–æ–æ–±—â–µ–Ω–∏–µ"', placeholder: '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' },
        { key: 'form_submit_button', label: '–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', placeholder: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' },
        { key: 'form_success_message', label: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ', placeholder: '–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' },
        { key: 'form_error_message', label: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', placeholder: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ' }
      ]
    },
    {
      id: 'contact_features',
      title: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞',
      icon: Clock,
      fields: [
        { key: 'features_title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞', placeholder: '–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å' },
        { key: 'feature_1_title', label: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1 - –ó–∞–≥–æ–ª–æ–≤–æ–∫', placeholder: '–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç' },
        { key: 'feature_1_description', label: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1 - –û–ø–∏—Å–∞–Ω–∏–µ', placeholder: '–û—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞' },
        { key: 'feature_2_title', label: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2 - –ó–∞–≥–æ–ª–æ–≤–æ–∫', placeholder: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è' },
        { key: 'feature_2_description', label: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2 - –û–ø–∏—Å–∞–Ω–∏–µ', placeholder: '–ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ' },
        { key: 'feature_3_title', label: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 3 - –ó–∞–≥–æ–ª–æ–≤–æ–∫', placeholder: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞' },
        { key: 'feature_3_description', label: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 3 - –û–ø–∏—Å–∞–Ω–∏–µ', placeholder: '3 –º–µ—Å—è—Ü–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏' }
      ]
    }
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-heading font-bold flex items-center gap-3">
            <Mail className="h-8 w-8" />
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
          </h1>
          <p className="text-muted-foreground">
            –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —è–∑—ã–∫–∞: {currentLanguage === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∫üá∏ English'}
          </p>
        </div>
        <div className="flex gap-3">
          <Button variant="outline" onClick={handleReset} disabled={isLoading}>
            <RotateCcw className="h-4 w-4 mr-2" />
            –°–±—Ä–æ—Å–∏—Ç—å
          </Button>
          <Button onClick={handleSave} disabled={isLoading}>
            <Save className="h-4 w-4 mr-2" />
            {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ'}
          </Button>
        </div>
      </div>

      <Tabs defaultValue="content" className="space-y-6">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="content">
            <Globe className="h-4 w-4 mr-2" />
            –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          </TabsTrigger>
          <TabsTrigger value="settings">
            <Settings className="h-4 w-4 mr-2" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </TabsTrigger>
        </TabsList>

        <TabsContent value="content" className="space-y-6">
          {sections.map((section) => {
            const IconComponent = section.icon;
            return (
              <Card key={section.id}>
                <CardHeader>
                  <CardTitle className="flex items-center gap-3">
                    <IconComponent className="h-6 w-6" />
                    {section.title}
                  </CardTitle>
                  <CardDescription>
                    –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "{section.title}"
                  </CardDescription>
                </CardHeader>
                
                <CardContent className="space-y-6">
                  <div className="grid gap-6 md:grid-cols-2">
                    {section.fields.map((field, fieldIndex) => (
                      <div key={field.key} className="space-y-2">
                        <Label htmlFor={`${section.id}-${field.key}`}>
                          {field.label}
                        </Label>
                        {field.key.includes('description') || field.key.includes('message') ? (
                          <Textarea
                            id={`${section.id}-${field.key}`}
                            value={formData[section.id]?.[field.key] || ''}
                            onChange={(e) => handleInputChange(section.id, field.key, e.target.value)}
                            placeholder={field.placeholder}
                            rows={3}
                          />
                        ) : (
                          <Input
                            id={`${section.id}-${field.key}`}
                            value={formData[section.id]?.[field.key] || ''}
                            onChange={(e) => handleInputChange(section.id, field.key, e.target.value)}
                            placeholder={field.placeholder}
                          />
                        )}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </TabsContent>

        <TabsContent value="settings" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-3">
                <Settings className="h-6 w-6" />
                –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </CardTitle>
              <CardDescription>
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
              </CardDescription>
            </CardHeader>
            
            <CardContent className="space-y-6">
              <div className="p-6 bg-muted/50 rounded-lg border-2 border-dashed border-primary/20">
                <div className="text-center">
                  <h3 className="text-lg font-semibold mb-2">SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                  <p className="text-muted-foreground mb-4">
                    –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª "SEO —Å—Ç—Ä–∞–Ω–∏—Ü"
                  </p>
                  <Button 
                    variant="outline" 
                    onClick={() => window.location.hash = 'seo'}
                  >
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                  </Button>
                </div>
              </div>
              
              <div className="p-6 bg-muted/50 rounded-lg border-2 border-dashed border-primary/20">
                <div className="text-center">
                  <h3 className="text-lg font-semibold mb-2">–ó–∞—è–≤–∫–∏ —Å —Ñ–æ—Ä–º—ã</h3>
                  <p className="text-muted-foreground mb-4">
                    –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞—è–≤–∫–∞–º–∏, –ø–æ—Å—Ç—É–ø–∞—é—â–∏–º–∏ —Å —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
                  </p>
                  <Button 
                    variant="outline" 
                    onClick={() => window.location.hash = 'submissions'}
                  >
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ContactContentManagement;