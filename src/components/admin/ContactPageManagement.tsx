import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { useSiteContent } from '@/hooks/useSiteContent';
import { useLanguage } from '@/contexts/LanguageContext';
import { 
  Save, 
  RotateCcw, 
  Mail, 
  Phone, 
  Clock,
  MapPin,
  MessageSquare,
  Settings,
  Globe,
  User,
  Send,
  Sparkles
} from 'lucide-react';

interface ContactPageManagementProps {
  language?: 'ru' | 'en';
}

const ContactPageManagement = ({ language: propLanguage }: ContactPageManagementProps) => {
  const { content, getContent, updateContent } = useSiteContent();
  const { toast } = useToast();
  const { language: contextLanguage } = useLanguage();
  const [formData, setFormData] = useState<Record<string, Record<string, string>>>({});
  const [isLoading, setIsLoading] = useState(false);
  
  // Use prop language if provided, otherwise use context language
  const currentLanguage = propLanguage || contextLanguage;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    if (content.length > 0) {
      const groupedContent: Record<string, Record<string, string>> = {};
      
      content.forEach(item => {
        if (item.language === currentLanguage) {
          if (!groupedContent[item.section]) {
            groupedContent[item.section] = {};
          }
          groupedContent[item.section][item.key] = item.value;
        }
      });
      
      setFormData(groupedContent);
    }
  }, [content, currentLanguage]);

  const handleInputChange = (section: string, key: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [section]: {
        ...prev[section],
        [key]: value
      }
    }));
  };

  const handleSave = async () => {
    setIsLoading(true);
    try {
      for (const section of Object.keys(formData)) {
        for (const [key, value] of Object.entries(formData[section])) {
          await updateContent(section, key, value, currentLanguage);
        }
      }
      
      toast({
        title: '–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
        description: '–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
      });
    } catch (error) {
      console.error('Error saving content:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        variant: 'destructive'
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleReset = () => {
    if (content.length > 0) {
      const groupedContent: Record<string, Record<string, string>> = {};
      
      content.forEach(item => {
        if (item.language === currentLanguage) {
          if (!groupedContent[item.section]) {
            groupedContent[item.section] = {};
          }
          groupedContent[item.section][item.key] = item.value;
        }
      });
      
      setFormData(groupedContent);
      toast({
        title: '–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã',
        description: '–§–æ—Ä–º–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é'
      });
    }
  };

  const sections = [
    {
      id: 'contact',
      title: '–ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤',
      emoji: 'üì¨',
      icon: Mail,
      description: '–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤',
      color: 'from-blue-500 to-cyan-500',
      fields: [
        { key: 'breadcrumb_home', label: '–•–ª–µ–±–Ω–∞—è –∫—Ä–æ—à–∫–∞: –ì–ª–∞–≤–Ω–∞—è', type: 'text' },
        { key: 'breadcrumb_contact', label: '–•–ª–µ–±–Ω–∞—è –∫—Ä–æ—à–∫–∞: –ö–æ–Ω—Ç–∞–∫—Ç—ã', type: 'text' },
        { key: 'title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', type: 'text' },
        { key: 'subtitle', label: '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫', type: 'textarea' },
        { key: 'hero_title_1', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ Hero - —á–∞—Å—Ç—å 1', type: 'text' },
        { key: 'hero_title_2', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ Hero - —á–∞—Å—Ç—å 2', type: 'text' },
        { key: 'hero_subtitle', label: '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ Hero', type: 'text' },
        { key: 'hero_benefit_1', label: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1', type: 'text' },
        { key: 'hero_benefit_2', label: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2', type: 'text' }
      ]
    },
    {
      id: 'contact',
      title: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      emoji: 'üìû',
      icon: Phone,
      description: '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏',
      color: 'from-emerald-500 to-teal-500',
      fields: [
        { key: 'email', label: 'Email –∞–¥—Ä–µ—Å', type: 'text' },
        { key: 'email_title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è Email', type: 'text' },
        { key: 'phone', label: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', type: 'text' },
        { key: 'phone_title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞', type: 'text' },
        { key: 'address', label: '–ê–¥—Ä–µ—Å', type: 'textarea' },
        { key: 'address_title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∞–¥—Ä–µ—Å–∞', type: 'text' }
      ]
    },
    {
      id: 'contact',
      title: '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏',
      emoji: '‚úâÔ∏è',
      icon: MessageSquare,
      description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π',
      color: 'from-violet-500 to-purple-500',
      fields: [
        { key: 'form_title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã', type: 'text' },
        { key: 'form_subtitle', label: '–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã', type: 'textarea' },
        { key: 'form_name_placeholder', label: 'Placeholder –¥–ª—è –∏–º–µ–Ω–∏', type: 'text' },
        { key: 'form_email_placeholder', label: 'Placeholder –¥–ª—è email', type: 'text' },
        { key: 'form_phone_placeholder', label: 'Placeholder –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞', type: 'text' },
        { key: 'form_message_placeholder', label: 'Placeholder –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è', type: 'text' },
        { key: 'form_button_text', label: '–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏', type: 'text' },
        { key: 'form_success_message', label: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ', type: 'textarea' },
        { key: 'form_error_message', label: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', type: 'text' }
      ]
    }
  ];

  return (
    <div className="space-y-8">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-heading font-bold flex items-center gap-3">
            <Mail className="h-8 w-8 text-primary" />
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
          </h1>
          <p className="text-muted-foreground mt-2">
            –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —è–∑—ã–∫–∞: {currentLanguage === 'ru' ? 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' : 'üá∫üá∏ English'}
          </p>
        </div>
        <div className="flex gap-3">
          <Button variant="outline" onClick={handleReset} disabled={isLoading}>
            <RotateCcw className="h-4 w-4 mr-2" />
            –°–±—Ä–æ—Å–∏—Ç—å
          </Button>
          <Button onClick={handleSave} disabled={isLoading}>
            <Save className="h-4 w-4 mr-2" />
            {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ'}
          </Button>
        </div>
      </div>

      <div className="grid gap-8">
        {sections.map((section, sectionIndex) => {
          const IconComponent = section.icon;
          return (
            <Card key={`${section.id}-${sectionIndex}`} className="overflow-hidden group hover:shadow-xl transition-all duration-300">
              <CardHeader className="relative">
                <div className={`absolute inset-0 bg-gradient-to-r ${section.color} opacity-5 group-hover:opacity-10 transition-opacity`} />
                <CardTitle className="flex items-center gap-4 relative z-10">
                  <div className={`p-3 rounded-xl bg-gradient-to-r ${section.color} text-white shadow-lg`}>
                    <IconComponent className="h-6 w-6" />
                  </div>
                  <div>
                    <div className="flex items-center gap-2">
                      <span className="text-2xl">{section.emoji}</span>
                      <span>{section.title}</span>
                    </div>
                  </div>
                </CardTitle>
                <CardDescription className="text-base relative z-10 ml-16">
                  {section.description}
                </CardDescription>
              </CardHeader>
              
              <CardContent className="space-y-6">
                <div className="grid gap-6 md:grid-cols-2">
                  {section.fields.map((field) => (
                    <div key={field.key} className="space-y-2">
                      <Label 
                        htmlFor={`${section.id}-${field.key}`}
                        className="text-sm font-medium flex items-center gap-2"
                      >
                        <span className="w-2 h-2 rounded-full bg-gradient-to-r from-primary to-accent"></span>
                        {field.label}
                      </Label>
                      {field.type === 'textarea' ? (
                        <Textarea
                          id={`${section.id}-${field.key}`}
                          value={formData[section.id]?.[field.key] || ''}
                          onChange={(e) => handleInputChange(section.id, field.key, e.target.value)}
                          placeholder={`–í–≤–µ–¥–∏—Ç–µ ${field.label.toLowerCase()}`}
                          rows={3}
                          className="transition-all duration-200 focus:ring-2 focus:ring-primary/20"
                        />
                      ) : (
                        <Input
                          id={`${section.id}-${field.key}`}
                          value={formData[section.id]?.[field.key] || ''}
                          onChange={(e) => handleInputChange(section.id, field.key, e.target.value)}
                          placeholder={`–í–≤–µ–¥–∏—Ç–µ ${field.label.toLowerCase()}`}
                          className="transition-all duration-200 focus:ring-2 focus:ring-primary/20"
                        />
                      )}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      <Card className="bg-muted/30 border-dashed border-2 border-muted-foreground/20">
        <CardContent className="p-8 text-center">
          <div className="flex flex-col items-center space-y-4">
            <div className="p-4 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white">
              <Sparkles className="h-8 w-8" />
            </div>
            <div>
              <h3 className="text-xl font-semibold mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
              <p className="text-muted-foreground mb-6">
                –£–ø—Ä–∞–≤–ª—è–π—Ç–µ SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∑–∞—è–≤–∫–∞–º–∏ —Å —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
              </p>
              <div className="flex gap-4 justify-center">
                <Button 
                  variant="outline" 
                  onClick={() => window.location.hash = 'seo'}
                  className="flex items-center gap-2"
                >
                  <Globe className="h-4 w-4" />
                  SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </Button>
                <Button 
                  variant="outline" 
                  onClick={() => window.location.hash = 'submissions'}
                  className="flex items-center gap-2"
                >
                  <User className="h-4 w-4" />
                  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ContactPageManagement;